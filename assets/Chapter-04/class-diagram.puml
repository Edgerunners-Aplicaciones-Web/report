@startuml SmartStayClassDiagram

' Estilo para que se vea mejor (opcional)
skinparam classAttributeIconSize 0
skinparam roundcorner 10
skinparam shadowing false
skinparam handwritten false
skinparam class {
    ArrowColor #2688d4
    BorderColor #2688d4
    BackgroundColor #FEFEFE
}

' Definición de Clases y Miembros

abstract class User {
    - id: string
    - name: string
    - email: string
    - passwordHash: string
    + register()
    + login()
    + logout()
    + editProfile()
    + recoverPassword()
}

class Guest extends User {
    + searchProperties(location, dates): Property[]
    + makeBooking(property, dates): Booking
    + viewBookingHistory(): Booking[]
    + writeReview(booking, rating, comment): Review
}

class Host extends User {
    - identityVerificationStatus: string
    - contactInfo: string
    + addProperty(details): Property
    + editProperty(propertyId, details)
    + removeProperty(propertyId)
}

class HotelAdministrator extends User {
    + viewFinancialReports(): Report
    + manageHousekeepingSchedule(room, schedule): void
    + monitorRoomStatus(): void
}

class Property {
    - id: string
    - name: string
    - description: string
    - location: string
    - photos: string[]
    - basePrice: float
    + updateAvailability(dates, status)
    + getAverageRating(): float
}

class Room {
    - id: string
    - roomNumber: string
    - type: string
    - status: string
    + updateStatus(newStatus)
}

class IoTDevice {
    - id: string
    - type: string
    - status: string
    + turnOn()
    + turnOff()
    + setLevel(value)
}

class HousekeepingSchedule {
    - scheduleId: string
    - assignedStaff: string
    - cleaningDate: Date
    - status: string
    + updateStatus(newStatus)
}

class Booking {
    - id: string
    - checkInDate: Date
    - checkOutDate: Date
    - totalPrice: float
    - status: string
    + confirmBooking()
    + cancelBooking()
}

class Payment {
    - id: string
    - amount: float
    - paymentDate: Date
    - status: string
    - paymentMethod: string
    + processPayment(): bool
    + generateInvoice(): Invoice
}

class Invoice {
    - id: string
    - issueDate: Date
    - details: string
    + download(): File
}

class Review {
    - id: string
    - rating: int
    - comment: string
    - reviewDate: Date
}

' Definición de Relaciones

Host "1" -- "1..*" Property : owns >
Guest "1" -- "0..*" Booking : makes >
Property "1" -- "0..*" Booking : is booked for <

Booking "1" -- "1..*" Payment : requires >
Payment "1" -- "1" Invoice : generates >

Booking "1" -- "0..1" Review : has <
Guest "1" -- "0..*" Review : writes >

Property "1" *-- "1..*" Room : is composed of
Room "1" o-- "0..*" IoTDevice : controls
Room "1" -- "1" HousekeepingSchedule : has a

@enduml