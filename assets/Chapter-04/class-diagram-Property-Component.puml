@startuml PropertyComponentClassDiagram
' Estilo
skinparam classAttributeIconSize 0
skinparam roundcorner 10

package "Componente de Propiedades y Operaciones" {

    class PropertyService {
        - propertyRepository: IPropertyRepository
        - iotCommandPublisher: IIoTCommandPublisher
        + registerProperty(hostId: string, details: PropertyDetails): Property
        + updateRoomStatus(roomId: string, newStatus: RoomStatus): void
        + checkAvailability(propertyId: string, dates: DateRange): boolean
        + sendIoTCommand(command: IoTCommand): void
    }

    interface IPropertyRepository {
        + findById(id: string): Property
        + findRoomsByProperty(propertyId: string): Room[]
        + save(property: Property): Property
        + updateRoom(room: Room): void
    }

    ' --- Entidades de Dominio ---
    class Property {
        - id: string
        - hostId: string
        - name: string
        - location: string
        - rooms: Room[]
    }

    class Room {
        - id: string
        - roomNumber: string
        - type: string
        - status: RoomStatus
    }

    enum RoomStatus {
        AVAILABLE
        OCCUPIED
        CLEANING
        OUT_OF_SERVICE
    }

    ' --- Interfaz para comunicarse con el Gateway IoT ---
    interface IIoTCommandPublisher {
        + publish(command: IoTCommand): void
    }

    note right of IIoTCommandPublisher
      Abstracción para enviar un mensaje
      a una cola (ej: AMQP/MQTT) que
      el Gateway IoT escuchará.
    end note

    ' --- Relaciones ---
    PropertyService "1" -> "1" IPropertyRepository : uses
    PropertyService "1" --> "1" IIoTCommandPublisher : uses
    Property "1" *-- "1..*" Room : contains
    Room -- RoomStatus
}
@enduml